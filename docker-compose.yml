version: "2"

networks:
  conjur:
  demo:
  bridge:

services:
  conjur:
    image: cyberark/conjur:0.3.0-stable
    environment:
      CONJUR_APPLIANCE_URL: http://localhost:3000
      DATABASE_URL: postgres://postgres@conjur-pg/postgres
      CONJUR_ADMIN_PASSWORD: admin
      PORT: 3000
      RAILS_ENV:
    ports: [ "3000:3000" ]
    entrypoint: |
      bash -c "export CONJUR_DATA_KEY=\"`conjurctl data-key generate`\" && \
               conjurctl db migrate && \
               conjurctl account create demo | tail -n1 | awk '{print $$NF}' > /root/api-key && \
               conjurctl server"
    networks:
      - conjur
      - bridge

  conjur-pg:
    image: postgres:9.3
    networks:
      - conjur

  demo-pg:
    image: postgres:9.3
    ports: [ "5432:5432" ]
    networks:
      - demo

  hello:
    build: .
    ports: [ "8080:8080" ]
    environment:
      CONJUR_APPLIANCE_URL: http://conjur:3000
      CONJUR_ACCOUNT: demo
      CONJUR_AUTHN_API_KEY: ${CONJUR_DEMO_API_KEY}
      CONJUR_AUTHN_LOGIN: admin
    volumes:
      - ./secrets.yml:/etc/secrets.yml
      - ./target:/target
    command: [ "java", "-jar", "/target/hello-0.1.0.jar" ]
    networks:
      - demo
      - bridge

  client:
    image: conjurinc/cli5
    depends_on: [ conjur ]
    environment:
      CONJUR_APPLIANCE_URL: http://conjur:3000
      CONJUR_ACCOUNT: demo
      CONJUR_AUTHN_API_KEY: ${CONJUR_DEMO_API_KEY}
      CONJUR_AUTHN_LOGIN: admin
    volumes: [ "./conjur:/conjur" ]
    networks:
      - bridge